---
- name: Load a variable file based on the OS type
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}-dependencies.yaml'
      paths:
        - 'vars'

- name: Install dependencies
  package:
    name: "{{ item }}"
    state: latest
  loop:
    - zip
    - tar
    - unzip
    - curl
    - wget

- name: Install PostgreSQL server
  block:
    - name: Install PostgreSQL server for RedHat
      include_tasks: el/main.yaml
      when: ansible_os_family == 'RedHat'
    - name: Install PostgreSQL server for RedHat
      include_tasks: debian/main.yaml
      when: ansible_os_family == 'Debian'

- name: Install Python package manager
  when: update_pg_hba_conf
  block:
  - name: Install python package manager
    package:
      name: python3-pip
      state: present
  - name: Update pip engine to at least 
    pip:
      executable: "{{ pip_executeable }}"
      state: present
      name: pip>=21.3.1
  - name: Check pip version
    register: pip_version
    command:
      cmd: "{{ pip_executeable }} --version"
  - name: debug pip version
    debug:
      msg: "{{ pip_version.stdout }}"
  - name: Install default package
    pip:
      executable: "{{ pip_executeable }}"
      name: "{{ item }}"
      state: present
    loop:
      - psycopg
      - psycopg2-binary
      - urllib3

- name: Enable & Start the service
  block: 
    - name: Make sure a service unit is running
      ansible.builtin.systemd_service:
        state: started
        daemon_reload: true
        enabled: true
        name: 'postgresql-{{ postgres_version }}'

- name: Configure PostgreSQL server
  when: update_pg_hba_conf
  block:
    - name: Setup pg_hba.conf
      postgresql_pg_hba:
        dest: "{{ postgres_data_dir }}/pg_hba.conf"
        contype: host
        users: "{{ pg_hba_users_mode | default('all') }}"
        source: "{{ pg_hba_source_mode | default('0.0.0.0/0') }}"
        databases: "{{ pg_hba_database_mode | default('all') }}"
        method: "{{ pg_hba_auth_method | default('scram-sha-256') }}"
        create: true
    - name: Remove default pg_hba on 127.0.0.1/32
      postgresql_pg_hba:
        dest: "{{ postgres_data_dir }}/pg_hba.conf"
        contype: host
        users: "all"
        source: "127.0.0.1/32"
        databases: "all"
        method: "scram-sha-256"
        state: absent
    - name: Allow port listen from anywhere
      ansible.builtin.lineinfile:
        path: "{{ postgres_data_dir }}/postgresql.conf"
        line: "listen_addresses = '*'"
        state: present
        create: yes
    - name: Set specified port in config
      notify: pg-restart-service
      ansible.builtin.lineinfile:
        path: "{{ postgres_data_dir }}/postgresql.conf"
        line: "port = 5432"
        state: present
        create: yes
    - name: pg-restart-service
      systemd_service:
        state: restarted
        name: 'postgresql-{{ postgres_version }}'

- name: Install patroni binary
  when: enabled_postgresql_ha
  block:
  - name: Install patroni binnary for pip
    pip:
      executable: "{{ pip_executeable }}"
      name: "{{ item }}"
      state: present
    loop:
      - patroni[etcd]=={{ pip_patroni_etcd_version }}
      - cdiff
  - name: Create a symbolic link of patroni
    ansible.builtin.file:
      src: /usr/local/bin/patroni
      dest: /usr/bin/patroni
      state: link
  - name: Create a symbolic link of patroni
    ansible.builtin.file:
      src: /usr/local/bin/patronictl
      dest: /usr/bin/patronictl
      state: link
  - name: Check patroni version
    command:
      cmd: "{{ pip_executeable }} show patroni"
    register: patroni_version
  - name: Debug version patroni
    debug:
      msg: "{{ patroni_version }}"
  - name: Check patronictl version
    command:
      cmd: patronictl version
    register: patronictl_version
  - name: Debug version patronictl
    debug:
      msg: "{{ patronictl_version }}"

- name: Install etcd
  when: enabled_postgresql_ha
  block:
    - name: Enable module etcd3 from pip
      pip:
        executable: "{{ pip_executeable }}"
        name: "{{ item }}"
        state: present
      loop:
        - etcd3=={{ pip_etcd3_version }}

    - name: Ensure group {{ etcd_user }} exists
      ansible.builtin.group:
        name: "{{ etcd_user }}"
        state: present

    - name: Add the user {{ etcd_user }} exists
      ansible.builtin.user:
        name: "{{ etcd_user }}"
        comment: user for using nexus-oss application
        group: "{{ etcd_user }}"
        append: yes

    - name: Create a directory {{ etcd_installation_path }} if it does not exist 
      ansible.builtin.file:
        path: "{{ etcd_installation_path }}"
        state: directory
        mode: '7777'
        owner: "{{ etcd_user }}"
        group: "{{ etcd_user }}"

    - name: Download etcd binary from {{ etcd_download_url }}
      ansible.builtin.unarchive:
        remote_src: yes
        src: "{{ etcd_download_url }}"
        dest: "{{ etcd_installation_path }}"
        mode: '0777'
        owner: "{{ etcd_user }}"
        group: "{{ etcd_user }}"

    - name: Give access to user {{ etcd_user }} recusively
      file: 
        dest: "{{ etcd_installation_path }}" 
        owner: "{{ etcd_user }}" 
        group: "{{ etcd_user }}" 
        mode: '0777' 
        recurse: yes

    - name: Check directory name under {{ etcd_installation_path }}
      shell: "ls -d {{ etcd_installation_path }}/etcd-* | tail -n 1"
      register: etcd_version_dir_name

    - name: Create a symbolic link for etcd
      ansible.builtin.file:
        src: "{{ etcd_version_dir_name.stdout }}/etcd"
        dest: "{{ item }}/etcd"
        owner: "{{ etcd_user }}" 
        group: "{{ etcd_user }}" 
        state: link
      loop:
        - /usr/local/bin
        - /usr/bin
    - name: Check etcd engine version
      command:
        cmd: etcd -version
      register: etcd_version
    - name: Debug version etcd
      debug:
        msg: "{{ etcd_version }}"

    - name: Create a symbolic link for etcd
      ansible.builtin.file:
        src: "{{ etcd_version_dir_name.stdout }}/etcdctl"
        dest: "{{ item }}/etcdctl"
        owner: "{{ etcd_user }}" 
        group: "{{ etcd_user }}" 
        state: link
      loop:
        - /usr/local/bin
        - /usr/bin
    - name: Check etcdctl engine version
      command:
        cmd: etcdctl version
      register: etcdctl_version
    - name: Debug version etcdctl
      debug:
        msg: "{{ etcdctl_version }}"